class spirograph(Scene):
    def construct(self):
        #setup
        ratio=1/2 #ratio of the radius of the inner circle to the outer circle
        spins=2*PI #angle you want to spin. For 10 spins, enter 10*2*PI and so on
        hole_ratio=1 #number between 0 and 1 representing the distance of the pencil hole from the centre
        direction=-1 #-1 if you want the inner to rotate around its own axis counter to the centre of the outer
        idk=2*PI #i dont even know what exactly this is does, but probably dont mess with it.

        outer=Circle(radius=4, color=BLUE)
        inner=Circle(radius=4*ratio, color=WHITE).shift(RIGHT*(4-4*ratio))
        self.add(outer)

        line=Line(inner.get_center(), inner.point_at_angle(0))

        pencil=Dot(
            line.point_from_proportion(hole_ratio), color=RED
        )

        graph=TracedPath(pencil.get_center)

        #make line with alpha updater
        line.save_state()
        def get_line(mob, alpha):
            mob.become(Line(
                inner.get_center(), inner.point_at_angle(((spins/ratio)-idk)*alpha)
            ))

        #rotate inner circle with alpha updater
        inner.save_state()
        def spiro(mob, alpha):
            mob.restore()
            mob.rotate(
                direction*spins*alpha, about_point=outer.get_center()
            )
        
        #get pencil dot on radial line
        def get_dot(mob):
            mob.move_to(
                line.point_from_proportion(hole_ratio)
            )
        pencil.add_updater(get_dot)

        self.add(line, graph, pencil)
        tex=Tex(f'Size Ratio = {ratio}').align_on_border(UR).scale(0.7)
        self.add(tex)
        self.add(
            Tex(f'Point Position = {hole_ratio}').next_to(tex, DOWN).scale(0.7)
        )
        self.play(UpdateFromAlphaFunc(inner, spiro), UpdateFromAlphaFunc(line, get_line), run_time=spins*4/(2*PI), rate_func=linear)
